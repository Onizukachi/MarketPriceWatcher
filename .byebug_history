exit
Time.parse(products[0]['created_at'])
products[0]['created_at']
products.sort { |product| Time.parse(product['created_at']) }
products
exit
products.sort { |product| product['created_at'] }
products
exit
(s.to_date - Date.today + 2).to_i
(s.to_date - Date.today + 3).to_i
(s.to_date - Date.today).to_i
s.to_date - Date.today
s.to_date
Date.parse(s)
s = Time.now
Time.now
products.map { |product| product.transform_keys(&:to_sym) }
products.map { 
products
products = product_repository.list(chat_id: message.chat.id)
message.chat_id
message.chat.id
message.chat
message.from.id
message.from
exit
message.data
message.message.text
message.message
message.data
message
exit
current_price["price"].to_s.gsub(/00$/, '').to_i
current_price["price"].to_s.gsub(/00$/, '')
current_price["price"].to_s
current_price
exit
product
exit
price_history_repository.create(product_id: id, price: result[:price])
result = scraper.get_product_details
 scraper = MarketPriceWatcher::ScraperFactory.create(message.text)
result = scraper.get_product_details
 price_history_repository.create(product_id: id, price: result[:price])
product
exit
 price_history_repository.create(product_id: id, price: result[:price])
product_repository.list
new_product
  new_product = product_repository.create(id: id,
                                                    title: result[:title],
                                                    chat_id: message.from.id,
                                                    market: result[:market],
                                                    source_url: message.text)
result
 result = scraper.get_product_details
result = product
            product_json = scraper.get_product_details
scraper = MarketPriceWatcher::ScraperFactory.create(message.text)
product[:id]
product
exit
product
exit
product
exit
price = size["price"]["product"]
 size = product["sizes"].find { |row| row["optionId"] == url_params[:size] }
url_params
exit
exity
@id
id
exit
url[/(?<=catalog\/)\d+(?=\/)/]
id
product = body["data"]["products"].find { |row| row["id"] == id }
size = product["sizes"].find { |row| row["optionId"] == size }
url
exit
size
url
size["price"]["product"]
    size = product["sizes"].find { |row| row["optionId"] == url_params[:size] }
url_params[:size]
title = product["name"]
total_quantity = product["totalQuantity"]
id = product["id"]
url_params[:id] 
product
exit
url_params
url_params[:size]
     product
 product = scraper.get_product_details
scraper = MarketPriceWatcher::ScraperFactory.create(message.text)
MarketPriceWatcher::ScraperFactory.create(message.text)
message.text
product_repository.list.to_a
product_repository.list
exit
file
exit
require_relative 'lib/market_price_watcher/migrations/01_create_users.sql'
require_relative 'lib/market_price_watcher/migrations/create_users.sql'
require_relative 'lib/migrations/create_users.sql'
require_relative 'lib./migrations/create_users.sql'
require_relative './migrations/create_users.sql'
require_relative '/migrations/create_users.sql'
exit
File.read("./lib/migrations/01_create_users.sql")
File.p
File.read("./lib/migrations/01_create_users.sql")
File.read("./migrations/01_create_users.sql")
exit
exit)
Dir.glob("#{__dir__}/repositories/**/*_repository.rb").each(&method(:require))
Dir.glob("#{__dir__}/repositories/**/*_repository.rb")
exit
File.read("e./migrations/01_create_users.sql")
File.read("./migrations/01_create_users.sql")
__dir__
Dir.glob("#{__dir__}#{path}/*.sql")
path = './migrations/'
Dir.glob(File.join(__dir__, "migrations", "*.sql")).sort
__dir__
{__dir__
Dir.glob("#{__dir__}#{path}/*.sql")
Dir.pwd
Dir.glob("./migrations/*.sql").sort
Dir.glob("#{path}/*.sql").sort
path = "migrations/"
Dir.glob("#{path}/*.sql").sort
path = "/migrations/"
path
Dir.glob("#{path}/*.sql").sort
exit
product_repository.list
exit
product_repository.list
product_repository
