exit
     message_sender.call(chat_id: product.chat_id, text:, reply_markup:)
reply_markup = MarketPriceWatcher::Keyboards[:inline_product].call(product.id, product.source_url)
 text = MarketPriceWatcher::Messages[:price_change].call(product.title, product.source_url,
                                                                new_price, current_price,
                                                                max_price, min_price, product.created_at)
max_price, min_price = [max_price(product.id), min_price(product.id)].map(&:price).map(&:to_i)
 text = MarketPriceWatcher::Messages[:price_change].call(product.title, product.source_url,
                                                                new_price, current_price,
                                                                max_price, min_price, product.created_at)
  create_price_history(product.id, new_price)
  max_price, min_price = [max_price(product.id), min_price(product.id)].map(&:price).map(&:to_i)
new_price
current_price
exit
product.id
product
 max_price, min_price = [max_price(product.id), min_price(product.id)].map(&:price).map(&:to_i)product
 max_price, min_price = [max_price(product.id), min_price(product.id)].map(&:price).map(&:to_i)
max_price(product.id)
 max_price, min_price = [max_price(product.id), min_price(product.id)].map(&:price)
 create_price_history(product.id, new_price)
new_price
current_price
exit
product['sizes'].first
query_hash['size']
query_product_size
product['sizes']
product
exit
e.message.to_i
e.message
e
MarketPriceWatcher::Services::UrlHandlerService::AlreadyTrackedProductError
exit
product
exit
OpenStruct.new(product)
product.to_h
product.toh
product
exit
product_repository.list(chat_id: chat_id)
exit
product_repository.list(chat_id: chat_id)
chat_id
exit
chat_id
exit
products_with_price.call(chat_id: chat_id)
chat_id
exit
products_with_price.call(chat_id: chat_id)
exit
products_with_current_price.call(chat_id: chat_id)
exit
учше
products_with_current_price
exit
products_with_current_price.call(chat_id: chat_id)
exit
message.text
exit
message_handler.process(message)
message_handler
message
exit
product['sizes']
product['sizes'].find { |row| row['optionId'] == query_product_size }
query_product_size
exit
MarketPriceWatcher::Repositories::ProductRepository.new.list.first
exit
reply_with_success(new_product)
create_price_history(new_product)
   create_product(new_product)
new_product
exit
 body['data']['products'].find { |row| row['id'] == product_id }
product_id
exit
product_id
body['data']['products'].find { |row| row['id'] == product_id }
body['data']['products']
